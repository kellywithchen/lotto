# 清理資料用
import pandas as pd 
import matplotlib.pyplot as plt

import requests,json
from bs4 import BeautifulSoup as bs
from requests.adapters import HTTPAdapter 
from requests.packages.urllib3.util.retry import Retry #對方擋住

session = requests.Session()
retry = Retry(connect=3)  #重新試三次
adapter = HTTPAdapter(max_retries=retry) #裝成http
session.mount('http://', adapter)
session.mount('https://', adapter)

year = ['103','104','105','106','107','108','109']
month = ['1','2','3','4','5','6','7','8','9','10','11','12']
form_data = []
for y in year:
    for m in month:
        formdata = {'__VIEWSTATE': '',
                    '__VIEWSTATEGENERATOR': '09BD3138',
                    '__EVENTVALIDATION': 'hH35YRW1jL2rA41igmV4iUuacEib5ll0nPfcYT9otadq9ghNFRhevzCR/7Wwetea7KT6QwYuqHHge7iBGvn+jTGcCs8JHvpzF6OpaIo4q13Qx7fFz5GGaEeE7UeNiMu4S/suaBCFoehTrE4tSnLj+PgrPqKROSR7h2DTg0pXg6nXUDTbg7ttlrqIBBUSaUip1nBYe5x+VYesjIZZt2PeS6reFpdHeO2UN0TnotTISwqZhKu+13SmqIFvKvIahVZR9pTuPwI987+Jo4mi0fYYGYsUhXs2rIcvCMwxut6AI6pc5YTHOE3ooxF5TxLpGHLVnNQdXc0EUIzd1TB8ZSkH44btUUEjmYXXY57Jy8wI1XSG95rWClJQWoPPepvGnRq0hoqmxCmaaLDBA0T0BuTr01xIPkGH5uPJRuqnFD2s1OfIZPq66TUaQraaDNlBzmS1/Z0h3X8+ZAcE4LM8BN/lfVSPY9z7i+HZpX90QMa3F+VqxF3aN+y4iyvVfVJDlg+vNezhsIIpSBmDW6yQAR2GgM/1cIFrzz1NzeuLpkoT6Kb/veaw+FwPijGuirHQLNanpTXj1iR4oDKIQreFWKThcjer7bYZ9c08q05iY16B1y5VAT5PEUgUAiVB7YLr2k7eLvwf+w==',
                    'forma': '請選擇遊戲',
                    'D539Control_history1$txtNO': '',
                    'D539Control_history1$chk': 'radYM',
                    'D539Control_history1$btnSubmit': '查詢'}
        formdata['D539Control_history1$dropYear'] = y
        formdata['D539Control_history1$dropMonth'] = m
        form_data.append(formdata)
        
winning_Numbers_Sort_lotto = ['D539Control_history1_dlQuery_No1_','D539Control_history1_dlQuery_No2_','D539Control_history1_dlQuery_No3_','D539Control_history1_dlQuery_No4_','D539Control_history1_dlQuery_No5_']

def search_winning_numbers(css_class):
    global winning_Numbers_Sort_lotto
    if(css_class != None):
        for i in range(len(winning_Numbers_Sort_lotto )):
            if winning_Numbers_Sort_lotto [i] in css_class:
                return css_class 
url = 'http://www.taiwanlottery.com.tw/lotto/DailyCash/history.aspx'           
numbers = []
for i in range(0,84):
    res = session.post(url, data = form_data[i])
    res.encoding = "utf-8"
    soup = bs(res.text,"lxml")
    num = soup.find_all(id = search_winning_numbers)
    for item in num:
        numbers.append(item.text)
numbers = sorted(numbers)

num_dict = {}
for num in num1:
    if num not in num_dict:
        num_dict[num] = 1
    else:
         num_dict[num]+= 1
            
# 畫圖            
period = list(num_dict.keys())
value = list(num_dict.values())

plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['figure.figsize'] = (60,20)

plt.bar(period,value)
for a,b in zip(period,value):
    plt.text(a, b+1, '%.0f' % b, ha='center', va= 'bottom',fontsize=40)
    
plt.xticks(fontsize=40)
plt.yticks(fontsize=40)
plt.xlabel("中獎數字", fontsize = 60)
plt.ylabel("出現次數", fontsize = 60)

plt.show()